// ===== 1. ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô (Shared/Common) =====

// --- Firebase Configuration ---
const firebaseConfig = {
    apiKey: "AIzaSyA1DVvalDuthN0-pUwECByT7-Ur5uTlsEE",
    authDomain: "thai-phairater.firebaseapp.com",
    projectId: "thai-phairater",
    storageBucket: "thai-phairater.appspot.com",
    messagingSenderId: "995255977727",
    appId: "1:995255977727:web:c0c1170665a19ab5136eca"
};
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
let currentUser = null;

// --- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á DOM Elements (‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö) ---
const mainWrapper = document.getElementById('main-wrapper'), authContainer = document.getElementById('authContainer'), gameArea = document.getElementById('gameArea'), gameGrid = document.getElementById('game'), topBar = document.getElementById('topBar'), restartBtn = document.getElementById('restartBtn'), popup = document.getElementById('popup'), popupBox = document.getElementById('popupBox'), popupText = document.getElementById('popupText'), popupControls = document.getElementById('popupControls'), popupBtn = document.getElementById('popupBtn'), profileIconContainer = document.getElementById('profileIconContainer'), profileIconImg = document.getElementById('profileIconImg'), sidebar = document.getElementById('sidebar'), sidebarOverlay = document.getElementById('sidebar-overlay'), sidebarCloseBtn = document.getElementById('sidebarCloseBtn'), sidebarProfileImg = document.getElementById('sidebarProfileImg'), sidebarUserName = document.getElementById('sidebarUserName'), sidebarUserEmail = document.getElementById('sidebarUserEmail'), sidebarLogoutBtn = document.getElementById('sidebarLogoutBtn'), scoreValue = document.getElementById('scoreValue'), scoreDisplay = document.getElementById('scoreDisplay'), livesDisplay = document.getElementById('livesDisplay'), timerFill = document.getElementById('timerFill'), progressSection = document.getElementById('progressSection'), roundCoinContainer = document.getElementById('roundCoinContainer'), finalRewardsContainer = document.getElementById('finalRewardsContainer');
const loadingScreen = document.getElementById('loading-screen');
const progressBar = document.getElementById('progress-bar');
const progressText = document.getElementById('progress-text');
const lessonPage = document.getElementById('lesson-page');
const lessonGrid = document.getElementById('lesson-grid');
const closeLessonBtn = document.getElementById('close-lesson-btn');
const lessonBtn = document.getElementById('lessonBtn');
const startBtn = document.getElementById('startBtn');
const level2Area = document.getElementById('level2Area');
const level2Title = document.getElementById('level2-title');
const targetSequenceContainer = document.getElementById('target-sequence-container');
const sourceConsonantsContainer = document.getElementById('source-consonants-container');

// --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° (Game Logic Variables) ---
let countdownInterval, selected = [], gameChars = [];
const TOTAL_TIME = 60, LIVES = 3;
let baseScore = 0, bonusScore = 0, totalScore = 0;
let scoreFromPreviousLevels = 0;
let lives = LIVES, timeLeft = TOTAL_TIME, completedLessons = 0;
let level1Diamonds = 0;
const CHARS_PER_ROUND = 12; 
const LEVEL2_CHARS_PER_ROUND = 11;
let currentLevel = 1; 
let level2CurrentRound = 0;
let level2Chars = [];
let expectedCharIndex = 0; 

// --- ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö (Sound Effects) ---
const hoverSound = document.getElementById("hoverSound"), clickSound = document.getElementById("clickSound"), wrongSound = document.getElementById("wrongSound"), gameoverSound = document.getElementById("gameoverSound"), winSound = document.getElementById("winSound"), coinSound = document.getElementById("coinSound"), levelUpSound = document.getElementById("levelUpSound"), coinSwooshSound = document.getElementById("coinSwooshSound"), loseLifeSound = document.getElementById("loseLifeSound"), roundEndCoinSound = document.getElementById("roundEndCoinSound"), goodResultSound = document.getElementById("goodResultSound"), diamondSound = document.getElementById("diamondSound");

// --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ (Consonant Data) ---
const baseUrl = "https://phairater.github.io/thai-sounds/";
const allCharIds = [ "‡∏Å", "‡∏Ç", "‡∏É", "‡∏Ñ", "‡∏Ö", "‡∏Ü", "‡∏á", "‡∏à", "‡∏â", "‡∏ä", "‡∏ã", "‡∏å", "‡∏ç", "‡∏é", "‡∏è", "‡∏ê", "‡∏ë", "‡∏í", "‡∏ì", "‡∏î", "‡∏ï", "‡∏ñ", "‡∏ó", "‡∏ò", "‡∏ô", "‡∏ö", "‡∏õ", "‡∏ú", "‡∏ù", "‡∏û", "‡∏ü", "‡∏†", "‡∏°", "‡∏¢", "‡∏£", "‡∏•", "‡∏ß", "‡∏®", "‡∏©", "‡∏™", "‡∏´", "‡∏¨", "‡∏≠", "‡∏Æ"];
const allChars = allCharIds.map(id => ({ id: id, img: `${baseUrl}${id}.png`, sound: `${baseUrl}${id}.mp3` }));
let matchedPairsInRound = 0;
let pairsInCurrentRound = 0;

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Helper Functions) ---
function playAudio(audio) {
    audio.currentTime = 0;
    audio.play().catch(e => console.error("Audio play failed:", e));
}
function playEndRoundSoundSequence() {
    playAudio(roundEndCoinSound);
    setTimeout(() => playAudio(goodResultSound), 1000);
}
function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Layout ‡πÅ‡∏•‡∏∞ UI ---
function calculateAndApplyLayout() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Layout ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏î‡πà‡∏≤‡∏ô 1)
}
function calculateLessonLayout() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Layout ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
}
function calculateLevel2Layout() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Layout ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏î‡πà‡∏≤‡∏ô 2)
}
function showPopup(msg, controls) {
    popupText.innerHTML = msg;
    popupControls.innerHTML = ''; // Clear previous buttons
    if (controls) {
        popupControls.appendChild(controls);
    }
    popup.style.display = "flex";
}
function closePopup() { popup.style.display = "none"; }
function preloadAllAssets(callback, text = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°...") {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤)
}
function updateScoreDisplay() {
    totalScore = scoreFromPreviousLevels + baseScore + bonusScore;
    scoreValue.textContent = totalScore;
}
function updateLivesDisplay() { livesDisplay.innerHTML = '‚ù§Ô∏è'.repeat(lives) + 'üíî'.repeat(LIVES - lives); }
function updateTrophyDisplay() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ñ‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)
}
function updateTimerBar() {
    const percentage = (timeLeft / TOTAL_TIME) * 100;
    timerFill.style.width = `${percentage}%`;
    if (percentage <= 25) timerFill.style.backgroundColor = '#dc3545';
    else if (percentage <= 50) timerFill.style.backgroundColor = '#ffc107';
    else timerFill.style.backgroundColor = '#28a745';
}

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏° (Game State Management) ---
function initializeGameUI() {
    updateScoreDisplay();
    timeLeft = TOTAL_TIME;
    updateLivesDisplay();
    updateTrophyDisplay();
    updateTimerBar();
    finalRewardsContainer.innerHTML = '';
}
function initializeGameState() {
    clearInterval(countdownInterval);
    currentLevel = 1;
    scoreFromPreviousLevels = 0;
    baseScore = 0; bonusScore = 0; totalScore = 0;
    lives = LIVES; completedLessons = 0;
    level1Diamonds = 0;
    gameGrid.innerHTML = "";
    initializeGameUI();
}
function resetGame() {
    clearInterval(countdownInterval);
    currentLevel = 1;
    scoreFromPreviousLevels = 0;
    baseScore = 0; bonusScore = 0; totalScore = 0;
    lives = LIVES; completedLessons = 0;
    level1Diamonds = 0;
    gameGrid.innerHTML = "";
    level2Area.style.display = 'none';
    gameArea.style.display = 'flex';
    startBtn.style.display = "inline-block";
    lessonBtn.style.display = "inline-block";
    restartBtn.style.display = "none";
    initializeGameUI();
}
// ---‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Animation ‡∏ï‡πà‡∏≤‡∏á‡πÜ (Animations) ---
function animateTrophiesToDiamonds(finalCallback) {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î animation ‡∏ñ‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏ä‡∏£)
}
function triggerFinalWinSequence() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
}
function triggerRoundCompleteSequence() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö)
}
function addCollectedCoin(isBonus = false) {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)
}
function removeCollectedCoin() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)
}

// ===== 2. ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (Login/Auth) =====

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ---
function updateAuthUI() {
    if (currentUser) {
        loadingScreen.style.display = 'none';
        authContainer.style.display = 'none';
        gameArea.style.display = 'flex';
        topBar.style.display = 'flex';
        profileIconContainer.style.display = 'block';
        const photoURL = currentUser.photoURL || 'https://i.imgur.com/sC22S2A.png';
        const displayName = currentUser.displayName || currentUser.email.split('@')[0];
        profileIconImg.src = photoURL;
        sidebarProfileImg.src = photoURL;
        sidebarUserName.textContent = displayName;
        sidebarUserEmail.textContent = currentUser.email;
        resetGame();
    } else {
        loadingScreen.style.display = 'none';
        authContainer.style.display = 'flex';
        gameArea.style.display = 'none';
        level2Area.style.display = 'none';
        topBar.style.display = 'none';
        profileIconContainer.style.display = 'none';
        closeSidebar();
    }
}
// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Sidebar ---
function openSidebar() { sidebar.classList.add('open'); sidebarOverlay.style.display = 'block'; }
function closeSidebar() { sidebar.classList.remove('open'); sidebarOverlay.style.display = 'none'; }

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Firebase Authentication ---
async function register() {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    const name = document.getElementById('register-name').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;
    const confirmPassword = document.getElementById('register-confirm-password').value;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (password !== confirmPassword) {
        alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
        return;
    }

    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Firebase Authentication
        const userCredential = await auth.createUserWithEmailAndPassword(email, password);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Display Name)
        await userCredential.user.updateProfile({
            displayName: name
        });
        
        // onAuthStateChanged ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        console.log("Registered and logged in successfully:", userCredential.user);

    } catch (error) {
        console.error("Error registering:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: " + error.message);
    }
}

async function login() {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    try {
        // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Firebase ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const userCredential = await auth.signInWithEmailAndPassword(email, password);
        
        // onAuthStateChanged ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        console.log("Logged in successfully:", userCredential.user);

    } catch (error) {
        console.error("Error logging in:", error);
        alert("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: " + error.message);
    }
}

async function loginWithGoogle() {
    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google
        const provider = new firebase.auth.GoogleAuthProvider();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Popup ‡∏Ç‡∏≠‡∏á Google ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        const result = await auth.signInWithPopup(provider);

        // onAuthStateChanged ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        console.log("Logged in with Google successfully:", result.user);

    } catch (error) {
        console.error("Error with Google login:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Google: " + error.message);
    }
}
async function logout() {
    try {
        // ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Firebase ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Sign Out
        await auth.signOut();
        
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Sign Out ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
        // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ onAuthStateChanged ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
        console.log("User logged out successfully.");

    } catch (error) {
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        console.error("Error logging out:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö: " + error.message);
    }
}

// ===== 3. ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (Lesson) =====
function showLessonPage() {
    lessonGrid.innerHTML = ''; 
    allChars.forEach(char => {
        const card = document.createElement('div');
        card.className = 'lesson-card';
        const img = document.createElement('img');
        img.src = char.img;
        img.alt = char.id;
        const text = document.createElement('span');
        text.textContent = char.id;
        card.appendChild(img);
        card.appendChild(text);
        card.onclick = () => { new Audio(char.sound).play(); };
        lessonGrid.appendChild(card);
    });
    lessonPage.style.display = 'flex';
    requestAnimationFrame(calculateLessonLayout);
}

function hideLessonPage() { lessonPage.style.display = 'none'; }


// ===== 4. ‡πÄ‡∏Å‡∏°‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1 (Game Level 1) =====

function startGame() {
    startBtn.style.display = "none";
    lessonBtn.style.display = "none";
    restartBtn.style.display = "inline-block";
    restartBtn.textContent = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà";
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    currentLevel = 1;
    scoreFromPreviousLevels = 0;
    baseScore = 0;
    bonusScore = 0;
    lives = LIVES;
    completedLessons = 0;

    initializeGameUI();
    gameChars = shuffle([...allChars]);
    startRound();
}

function restartGame() {
    closePopup();
    resetGame();
}

function startRound() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1)
}

function selectCard(div, card) {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1)
}

// ===== 5. ‡πÄ‡∏Å‡∏°‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2 (Game Level 2) =====

function startLevel2() {
    currentLevel = 2;
    gameArea.style.display = 'none';
    level2Area.style.display = 'flex';
    restartBtn.style.display = 'inline-block';
    level2CurrentRound = 0;
    startLevel2Round();
}

function startLevel2Round() {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2)
}

function selectSequenceChar(charDiv, char) {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2)
}


// ===== ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞ Event Listeners (Game Over & Event Listeners) =====

function createSingleButtonPopup(text, onClickAction) {
    const controls = document.createElement('div');
    const btn = document.createElement('button');
    btn.textContent = text;
    btn.style.backgroundColor = '#28a745';
    btn.onclick = onClickAction;
    controls.appendChild(btn);
    return controls;
}

function handleGameOver() {
    clearInterval(countdownInterval);
    playAudio(gameoverSound);
    showPopup("üíî ‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß! ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞", createSingleButtonPopup("‡πÄ‡∏•‡πà‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà", () => {
        closePopup();
        restartCurrentLevel();
    }));
    restartBtn.style.display = 'none';
    lessonBtn.style.display = "inline-block";
}
function handleScoreGameOver() {
    clearInterval(countdownInterval);
    playAudio(gameoverSound);
    
    showPopup("<h2>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏°‡∏î!</h2><p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>", createSingleButtonPopup("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà", () => {
        closePopup();
        resetGame();
    }));
    
    restartBtn.style.display = 'none';
}

function restartCurrentLevel() {
    closePopup();
    lives = LIVES;
    baseScore = 0;
    bonusScore = 0;
    updateLivesDisplay();
    updateScoreDisplay(); 
    if (currentLevel === 1) {
        gameChars = shuffle([...allChars]);
        startRound();
    } else if (currentLevel === 2) {
        startLevel2();
    }
}

// --- Event Listeners (‡∏ï‡∏±‡∏ß‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå) ---
auth.onAuthStateChanged((user) => {
    currentUser = user;
    if (user) {
        // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡∏°‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á UI
        preloadAllAssets(updateAuthUI, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡∏°...");
    } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏•‡∏¢
        updateAuthUI();
    }
});

profileIconContainer.onclick = openSidebar;
sidebarOverlay.onclick = closeSidebar;
sidebarCloseBtn.onclick = closeSidebar;
sidebarLogoutBtn.onclick = logout;
closeLessonBtn.onclick = hideLessonPage;

// --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ---
let resizeTimeout;
function handleScreenChange() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
        setFullHeight();
        if (lessonPage.style.display === 'flex') {
            calculateLessonLayout();
        } else if (gameArea.style.display === 'flex' && currentLevel === 1) {
            calculateAndApplyLayout();
        } else if (level2Area.style.display === 'flex') {
            calculateLevel2Layout();
        }
    }, 100);
}

window.addEventListener('resize', handleScreenChange);
window.addEventListener('orientationchange', handleScreenChange);

// --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ ---
function setFullHeight() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}
window.addEventListener('load', () => { setFullHeight(); });
